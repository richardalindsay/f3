// Generated by CoffeeScript 1.8.0
(function() {
  var Blog, BlogView, ControlsView, EditPostView, Pagination, PaginationList, PaginationListView, PaginationView, Post, PostView, Posts, PostsView, Router, blogView, config, editPostView, init, router;

  $.fn.serializeObject = function() {
    var a, o;
    o = {};
    a = this.serializeArray();
    this.find("[contenteditable]").each(function() {
      return a.push({
        name: $(this).attr("name"),
        value: $(this).html()
      });
    });
    $.each(a, function() {
      if (o[this.name] !== undefined) {
        if (!o[this.name].push) {
          o[this.name] = [o[this.name]];
        }
        return o[this.name].push(this.value || "");
      } else {
        return o[this.name] = this.value || "";
      }
    });
    return o;
  };

  config = {
    pageSize: 10
  };

  Blog = Backbone.Model.extend({
    url: function() {
      var offset;
      offset = (this.get('page') - 1) * config.pageSize;
      return 'blog/' + config.pageSize + '/' + offset;
    },
    parse: function(response) {
      return {
        pagination: response.data.pagination,
        posts: response.data.posts
      };
    }
  });

  Pagination = Backbone.Model.extend({
    defaults: {
      'className': '',
      'element': 'a'
    }
  });

  Post = Backbone.Model.extend({
    urlRoot: 'post',
    idAttribute: '_id',
    sync: function() {
      this.set({
        id: this.id
      });
      if (arguments[0] === 'read') {
        this.set({
          action: true
        });
      } else {
        this.set({
          action: false
        });
      }
      return Backbone.sync.apply(this, arguments);
    },
    initialize: function() {
      return this.set({
        id: this.id
      });
    }
  });

  PaginationList = Backbone.Collection.extend({
    model: Pagination
  });

  Posts = Backbone.Collection.extend({
    model: Post
  });

  ControlsView = Backbone.View.extend({
    className: 'controls',
    template: _.template($('#controls-template').html()),
    render: function() {
      this.$el.html(this.template());
      return this;
    }
  });

  PaginationView = Backbone.View.extend({
    template: _.template($('#pagination-template').html()),
    render: function() {
      this.setElement(this.template(this.model.attributes));
      return this;
    }
  });

  PaginationListView = Backbone.View.extend({
    tagName: 'ul',
    className: 'pagination pagination-sm',
    collection: new PaginationList(),
    initialize: function(options) {
      return this.options = options;
    },
    render: function() {
      this.$el.empty();
      this.collection.reset(this.calcPagination(this.options.rowCount));
      this.collection.each(function(model) {
        this.modelView = new PaginationView({
          model: model
        });
        return this.$el.append(this.modelView.render().el);
      }, this);
      return this;
    },
    calcPagination: function(rowCount) {
      var page, pagination, totalPages;
      pagination = [];
      page = this.options.page;
      totalPages = Math.floor(rowCount / config.pageSize + 1);
      if (page === 1) {
        pagination.push({
          text: '<',
          page: '#',
          className: 'disabled'
        });
      } else {
        pagination.push({
          text: '<',
          page: page - 1
        });
      }
      _.each(_.range(page - 4, page + 5), function(i) {
        if (i < page - 2 && totalPages - i <= 4 || i >= page - 2 && i > 0 && pagination.length <= 5) {
          if (i === page) {
            return pagination.push({
              text: i,
              page: i,
              className: 'active'
            });
          } else {
            return pagination.push({
              text: i,
              page: i
            });
          }
        }
      });
      if (page === totalPages) {
        pagination.push({
          text: '>',
          page: '#',
          className: 'disabled'
        });
      } else {
        pagination.push({
          text: '>',
          page: page + 1
        });
      }
      return pagination;
    }
  });

  PostView = Backbone.View.extend({
    tagName: 'div',
    className: 'blog-post',
    template: _.template($('#posts-template').html()),
    render: function() {
      this.$el.html(this.template(this.model.attributes));
      return this;
    }
  });

  PostsView = Backbone.View.extend({
    className: 'blog-main',
    render: function() {
      this.$el.empty();
      this.collection.each(function(model) {
        this.modelView = new PostView({
          model: model
        });
        return this.$el.append(this.modelView.render().el);
      }, this);
      return this;
    }
  });

  BlogView = Backbone.View.extend({
    el: '#main',
    fragment: $(document.createDocumentFragment()),
    model: new Blog(),
    subViews: {
      controlsView: new ControlsView(),
      paginationListView: new PaginationListView(),
      postsView: new PostsView()
    },
    initialize: function() {
      return this.listenTo(this.model, 'sync', this.render);
    },
    render: function() {
      var e, _i, _len, _ref;
      this.subViews.controlsView = new ControlsView();
      this.subViews.paginationListView = new PaginationListView({
        page: this.model.get('page'),
        rowCount: this.model.get('pagination').rowCount
      });
      this.subViews.postsView = new PostsView({
        collection: new Posts(this.model.get('posts'))
      });
      this.subViews.$controls = $(this.subViews.controlsView.render().el);
      this.subViews.$paginationTop = $(this.subViews.paginationListView.render().el);
      this.subViews.$posts = $(this.subViews.postsView.render().el);
      _ref = $('pre', this.subViews.$posts);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        hljs.highlightBlock(e);
      }
      this.subViews.$paginationBottom = this.subViews.$paginationTop.clone();
      this.fragment.append(this.subViews.$controls).append(this.subViews.$paginationTop).append(this.subViews.$posts).append(this.subViews.$paginationBottom);
      this.$el.html(this.fragment);
      return this;
    }
  });

  EditPostView = Backbone.View.extend({
    el: '#main',
    template: _.template($('#edit-post-template').html()),
    model: new Post(),
    events: {
      'submit .edit-post-form': 'savePost',
      'click .delete': 'deletePost',
      'click .editControls button': 'editContent'
    },
    initialize: function() {
      this.listenTo(this.model, 'sync', this.designateAction);
      return this.listenTo(this.model, 'clear', this.renderEditPost);
    },
    designateAction: function(model) {
      if (this.model.get('action')) {
        return this.renderEditPost(model);
      } else {
        return router.navigate('', {
          trigger: true
        });
      }
    },
    renderEditPost: function(model) {
      return this.$el.html(this.template(model ? this.model.attributes : {
        id: null
      }));
    },
    savePost: function(event) {
      var postData;
      event.preventDefault();
      postData = $(event.currentTarget).serializeObject();
      if (this.model.id) {
        postData = $.extend({
          id: this.model.id
        }, postData);
      }
      return this.model.save(postData);
    },
    deletePost: function(event) {
      event.preventDefault();
      return this.model.destroy();
    },
    editContent: function(event) {
      var role;
      event.preventDefault();
      role = $(event.currentTarget).closest('[data-role]').data('role');
      if (/h1|h2|p|pre/.test(role)) {
        return document.execCommand('formatBlock', false, role);
      } else {
        return document.execCommand(role, false, null);
      }
    }
  });

  Router = Backbone.Router.extend({
    routes: {
      '': 'home',
      'page/:page': 'showPage',
      'addPost': 'addPost',
      'editPost/:id': 'editPost'
    },
    home: function() {
      blogView.model.set({
        page: 1
      });
      return blogView.model.fetch();
    },
    showPage: function(page) {
      blogView.model.set({
        page: parseInt(page, 10)
      });
      return blogView.model.fetch();
    },
    addPost: function() {
      editPostView.model.clear();
      return editPostView.model.trigger('clear');
    },
    editPost: function(id) {
      editPostView.model.set({
        _id: id
      });
      return editPostView.model.fetch();
    }
  });

  blogView = new BlogView();

  editPostView = new EditPostView();

  router = new Router();

  $(function() {
    return init();
  });

  init = function() {
    return Backbone.history.start();
  };

}).call(this);
